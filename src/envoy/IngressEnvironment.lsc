import { EnvironmentController } from './Environment'
import { FileWatcher } from '@enmeshed/mesh-reflection-file-watcher'

import fs from 'fs'
import util from 'util'
import path from 'path'

debug = require('debug')('bowser:envoy')

readFile = util.promisify(fs.readFile)

loadSslFromFile(data, secretName, basePath): void -/>
  debug("loading ssl certificate secret", secretName, "from", basePath)
  pk <- readFile(path.join(basePath, 'private_key'))
  chain <- readFile(path.join(basePath, 'certificate_chain'))
  debug("loaded ssl certificate secret", secretName, "from", basePath)
  if not data.secrets: data.secrets = []
  data.secrets.push({
    name: secretName
    tls_certificate: {
      certificate_chain: {
        inline_string: chain
      }
      private_key: {
        inline_string: pk
      }
    }
  })

export class IngressEnvironmentController extends EnvironmentController:
  constructor(envoyController, env, watchFile) ->
    super(envoyController, env)
    this.watchFile = watchFile

  start() ->
    this.watcher = new FileWatcher(this.watchFile, this.changed)
    this.watcher.start()

  stop() ->
    this.watcher.stop()

  changed() =/>
    raw <- readFile(this.watchFile)
    data = JSON.parse(raw)

    // Load any SSL certs that may be stored on disk
    debug("loading ssl certificate secrets stored on disk")
    <- [...for elem x in (data.certificateFiles or []):
      [loadSslFromFile(data, x.name, x.path)]
    ]

    { types } = this.envoyController
    { Cluster, RouteConfiguration, Listener, Secret } = types

    rsrc = [
      ...for elem x in (data.clusters or []):
        [Cluster.fromObject(x)]
      ...for elem x in (data.listeners or []):
        [Listener.fromObject(x)]
      ...for elem x in (data.routes or []):
        [RouteConfiguration.fromObject(x)]
      ...for elem x in (data.secrets or []):
        [Secret.fromObject(x)]
    ]

    this.env.set(rsrc)
