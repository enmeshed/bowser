ingressVirtualRouteForService(svc, prov) ->
  ord = prov.getServiceOrdinal(svc)
  prefix = if svc.type == 'grpc_mesh':
    `/grpc/${svc.name}/`
  elif svc.type == 'http_mesh':
    `/http/${svc.name}/`

  {
    name: `vroute_local_${svc.name}`
    match: { prefix }
    route: {
      cluster: `cluster_local_${ord}`
      prefix_rewrite: '/'
    }
  }

ingressClusterForService(svc, prov, basePort) ->
  ord = prov.getServiceOrdinal(svc)
  rst = {
    name: `cluster_local_${ord}`
    connect_timeout: { seconds: 1 }
    type: 'STATIC'
    lb_policy: 'ROUND_ROBIN'
    load_assignment: {
      cluster_name: `cluster_local_${ord}`
      endpoints: [{
        lb_endpoints: [{
          endpoint: {
            address: {
              socket_address: {
                address: '127.0.0.1'
                port_value: basePort + ord
              }
            }
          }
        }]
      }]
    }
  }
  if svc.type == 'grpc_mesh':
    rst.http2_protocol_options = {}
  rst

export populateIngressResources(rsrc, prov, types, ingressPort, hostBasePort): void ->
  // No services provided = no ingresses
  if not prov: return

  { Listener, RouteConfiguration, Cluster } = types
  services = [...for svc of prov.getServiceSet():
    if svc.type == 'grpc_mesh' or svc.type == 'http_mesh':
      [svc]
  ]

  if services.length == 0: return

  // LISTENER
  rsrc.push(Listener.fromObject({
    name: 'listener_ingress'
    address: {
      socket_address: {
        address: '0.0.0.0'
        port_value: ingressPort
      }
    }
    filter_chains: [{
      filters: [{
        name: 'envoy.http_connection_manager'
        config: {
          // XXX
          access_log: [{
            name: "envoy.file_access_log"
            config: { path: "/dev/stdout" }
          }]
          codec_type: "AUTO"
          stat_prefix: "ingress"
          http_filters: [{
            name: "envoy.router"
            config: {}
          }]
          rds: {
            config_source: { ads: {} }
            route_config_name: 'route_ingress'
          }
        }
      }]
    }]
  }))

  // ROUTE
  rsrc.push(RouteConfiguration.fromObject({
    name: 'route_ingress'
    virtual_hosts: [{
      name: 'vhost_ingress'
      domains: ['*']
      routes: [
        ...for elem svc in services: [ingressVirtualRouteForService(svc, prov)]
      ]
    }]
  }))

  // CLUSTERS
  for elem svc in services:
    rsrc.push(
      Cluster.fromObject(
        ingressClusterForService(svc, prov, hostBasePort)
      )
    )
